#!/usr/bin/env sh

{
    DEFAULT_PSOCRATIC_HOME="$HOME/.psocratic"
    DEFAULT_PSOCRATIC_REPO="psocratic/psocratic"

    thisdir="$(dirname $0)"
    . "$thisdir/common"
    deps="$thisdir/deps"

    aws_google_sso() {
        "$thisdir/aws/google-sso" "$@"; return $?
    }

    detect_psocratic_home() {
        [ -e "$1" ] && return 0 || return 1
    }

    detect_psocratic_home_env() {
        if [ -n "$PSOCRATIC_HOME" ]; then
            echo "$PSOCRATIC_HOME"
            return 0
        else
            logerr "no PSOCRATIC_HOME environment variable detected"
            return 1
        fi
    }

    detect_psocratic_home_export() {
        shell_rc_file="$1"
        source="$HOME/.*shrc $HOME/.*profile $shell_rc_file"
        results=$($deps exec grep -nsP '^(?!\s*#\s*)[^#]*export\s+PSOCRATIC_HOME' $source)

        if [ -n "$results" ]; then
            echo "$results"
            return 0
        else
            logerr "no PSOCRATIC_HOME export detected"
            return 1
        fi
    }

    github_auth() {
        "$thisdir/github/auth" "$@"; return $?
    }

    github_clone() {
        "$thisdir/github/clone" \
            -github-token $1 \
            -github-repo $2 \
            -local-dest $3; return $?
    }

    install_deps() {
        "$(dirname $0)/deps" install; return $?
    }

    shell_append_psocratic_init_to_rc_file() {
        psocratic_home="$1"
        shell_rc_file="$2"

        rcstring="\n[ -d $psocratic_home ] && export PSOCRATIC_HOME=\"$psocratic_home\" && export PATH=\"$psocratic_home/toolbelt:\$PATH\""

        if [ -z "$shell_rc_file" ] \
            && ! shell_rc_file=$(shell_get_rc_file); then
            logerr "could not determine shell rc file"
            logerr "please add the following to your shell's initialization file:"
            >&2 echo "$rcstring"
            return 1
        fi

        uname="$(uname -s)"
        if [ "$uname" != "Darwin" ]; then
            echo "$rcstring" >> "$shell_rc_file"
        else
            echo "$rcstring" >> "$HOME/.profile"
            if ! $($deps exec grep -sqP \
                    "^\s*.\s*($HOME/|\$HOME|~/).profile" "$shell_rc_file"); then
                echo "\n. \$HOME/.profile" >> "$shell_rc_file"
            fi
        fi
    }

    shell_get_rc_file() {
        shell=$(basename $SHELL)

        case $shell in
            bash) rcfile="$HOME/.bashrc" ;;
            zsh) rcfile="$HOME/.zshrc" ;;
            *) return 1 ;;
        esac

        echo $rcfile
    }

    copyargs="$@"
    psocratic_home="$DEFAULT_PSOCRATIC_HOME"
    shell_rc_file=""
    while [ $# -gt 0 ]; do
        arg=$1
        case $arg in
            -psocratic-home) psocratic_home=$2 shift ;;
            -shell-rc-file) shell_rc_file=$2 shift ;;
        esac
        shift
    done

    log "installing psocratic"
    install_deps \
        || logexit "failed to install all deps"

    detect_psocratic_home $psocratic_home \
        && logexit "-psocratic-home already exists at $psocratic_home; \
            please remove or move to another location before proceeding"
    psocratic_home_env=$(detect_psocratic_home_env) \
        && logexit "detected environment variable PSOCRATIC_HOME=$psocratic_home_env; \
            please unset before proceeding"
    psocratic_home_export=$(detect_psocratic_home_export $shell_rc_file) \
        && logerr "detected shell rc scripts that export PSOCRATIC_HOME:" \
        && echo $psocratic_home_export | while read line; do echo "\t$line"; done \
        && logexit "please remove or comment out before proceeding"

    aws_google_auth=$(aws_google_sso "$copyargs") \
        || logexit "failed to log into Psocratic Google account"
    github_auth=$(github_auth "$copyargs") \
        || logexit "failed to log into GitHub"
    github_token=$(echo "$github_auth" | $deps exec jq -r .token) \
        || logexit "failed to parse token from\n$github_auth"
    github_clone $github_token "$DEFAULT_PSOCRATIC_REPO" "$psocratic_home" \
        || logexit "failed to clone $DEFAULT_PSOCRATIC_REPO to $psocratic_home"
    shell_append_psocratic_init_to_rc_file $psocratic_home $shell_rc_file

    psocratic_email=$(echo $aws_google_auth \
        | $deps exec jq -r .user_email)
    aws_access_key_id=$(echo $aws_google_auth \
        | $deps exec jq -r .aws_access_key_id)
    aws_secret_access_key=$(echo $aws_google_auth \
        | $deps exec jq -r .aws_secret_access_key)
    aws_session_token=$(echo $aws_google_auth \
        | $deps exec jq -r .aws_session_token)
    aws_security_token=$(echo $aws_google_auth \
        | $deps exec jq -r .aws_security_token)

    export PSOCRATIC_HOME="$psocratic_home"
    export PATH="$psocratic_home/toolbelt:$PATH"
    psocratic init                                       \
        -aws-access-key-id "$aws_access_key_id"          \
        -aws-secret-access-key  "$aws_secret_access_key" \
        -aws-session-token "$aws_session_token"          \
        -aws-security-token "$aws_security_token"        \
        -email "$psocratic_email"                        \
        -github-token "$github_token"                    \
    || return $?
    log "successfully installed psocratic"
}
