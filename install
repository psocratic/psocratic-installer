#!/usr/bin/env sh

{
    DEFAULT_GITHUB_BRANCH="master"
    DEFAULT_PSOCRATIC_HOME="$HOME/.psocratic"
    DEFAULT_PSOCRATIC_REPO="psocratic/psocratic"

    thisdir="$(dirname $0)"
    . "$thisdir/common"
    deps="$thisdir/deps"

    aws_google_sso() {
        "$thisdir/aws/google-sso" "$@"; return $?
    }

    detect_psocratic_home() {
        [ -e "$1" ] && return 0 || return 1
    }

    detect_psocratic_home_env() {
        if [ -n "$PSOCRATIC_HOME" ]; then
            echo "$PSOCRATIC_HOME"
            return 0
        else
            logerr "no PSOCRATIC_HOME environment variable detected"
            return 1
        fi
    }

    detect_psocratic_home_export() {
        shell_rc_file="$1"
        source="$HOME/.*shrc $HOME/.*profile $shell_rc_file"
        results=$($deps exec cat $source \
            | $deps exec grep -s 'export\s+PSOCRATIC_HOME' \
            | $deps exec grep -v '^\s*#')

        if [ -n "$results" ]; then
            echo "$results"
            return 0
        else
            logerr "no PSOCRATIC_HOME export detected"
            return 1
        fi
    }

    github_auth() {
        "$thisdir/github/auth" "$@"; return $?
    }

    github_clone() {
        force=0
        github_branch=""
        github_token=""
        github_repo=""
        local_dest=""

        while [ $# -gt 0 ]; do
            arg=$1
            case $arg in
                -force) force=1 ;;
                -github-branch) github_branch=$2 shift ;;
                -github-repo) github_repo=$2 shift ;;
                -github-token) github_token=$2 shift ;;
                -local-dest) local_dest=$2 shift ;;
            esac
            shift
        done

        extra_args=""
        if [ $force -eq 1 ]; then
            extra_args="-force"
        fi
        "$thisdir/github/clone" \
            $extra_args \
            -github-branch $github_branch \
            -github-repo $github_repo \
            -github-token $github_token \
            -local-dest $local_dest; return $?
    }

    install_deps() {
        deps_args="$@"
        "$(dirname $0)/deps" install "$deps_args"; return $?
    }

    shell_append_psocratic_init_to_rc_file() {
        psocratic_home="$1"
        shell_rc_file="$2"

        rcstring="[ -d $psocratic_home ] && export PSOCRATIC_HOME=\"$psocratic_home\" && export PATH=\"$psocratic_home/toolbelt:\$PATH\""

        if [ -z "$shell_rc_file" ] \
            && ! shell_rc_file=$(shell_get_rc_file); then
            logerr "could not determine shell rc file"
            logerr "please add the following to your shell's initialization file:"
            >&2 echo "$rcstring"
            return 1
        fi

        uname="$(uname -s)"
        if [ "$uname" != "Darwin" ]; then
            echo >> "$shell_rc_file"
            echo "$rcstring" >> "$shell_rc_file"
        else
            echo >> "$HOME/.profile"
            echo "$rcstring" >> "$HOME/.profile"
            if ! $($deps exec cat $shell_rc_file \
                | $deps exec grep -sq \
                    "^\s*.\s*($HOME|\\\$HOME|~)/.profile"); then
                echo >> "$shell_rc_file"
                echo ". \$HOME/.profile" >> "$shell_rc_file"
            fi
        fi
    }

    shell_get_rc_file() {
        shell=$(basename $SHELL)

        case $shell in
            bash) rcfile="$HOME/.bashrc" ;;
            zsh) rcfile="$HOME/.zshrc" ;;
            *) return 1 ;;
        esac

        echo $rcfile
    }

    copyargs="$@"
    deps_args=""
    force=0
    github_branch="$DEFAULT_GITHUB_BRANCH"
    psocratic_home="$DEFAULT_PSOCRATIC_HOME"
    shell_rc_file=""
    while [ $# -gt 0 ]; do
        arg=$1
        case $arg in
            -github-branch) github_branch=$2 shift ;;
            -psocratic-home) psocratic_home=$2 shift ;;
            -force) force=1 ;;
            -shell-rc-file) shell_rc_file=$2 shift ;;
            -use-pkgmgr) deps_args="$deps_args -pkgmr $2" shift ;;
        esac
        shift
    done

    log "installing psocratic"
    install_deps "$deps_args" \
        || logexit "failed to install all deps"

    detect_psocratic_home $psocratic_home \
        && test $force -eq 0 \
        && logexit "psocratic home already exists at $psocratic_home; \
            please remove or move to another location before proceeding"

    psocratic_home_env=$(detect_psocratic_home_env) \
        && test $force -eq 0 \
        && logexit "detected environment variable PSOCRATIC_HOME=$psocratic_home_env; \
            please unset before proceeding"

    psocratic_home_export=$(detect_psocratic_home_export $shell_rc_file) \
        && test $force -eq 0 \
        && logerr "detected shell rc scripts that export PSOCRATIC_HOME:" \
        && echo $psocratic_home_export | while read line; do echo "\t$line"; done \
        && logexit "please remove or comment out before proceeding"

    aws_google_auth=$(aws_google_sso "$copyargs") \
        || logexit "failed to log into Psocratic Google account"
    github_auth=$(github_auth "$copyargs") \
        || logexit "failed to log into GitHub"
    github_token=$(echo "$github_auth" | $deps exec jq -r .token) \
        || logexit "failed to parse token from\n$github_auth"
    github_username=$(echo "$github_auth" | $deps exec jq -r .username) \
        || logexit "failed to parse username from\n$github_auth"

    github_clone_extra_args=""
    if [ $force -eq 1 ]; then
        github_clone_extra_args="-force"
    fi
    github_clone $github_clone_extra_args \
        -github-branch "$github_branch" \
        -github-repo "$DEFAULT_PSOCRATIC_REPO" \
        -github-token $github_token \
        -local-dest "$psocratic_home" \
        || logexit "failed to clone $DEFAULT_PSOCRATIC_REPO to $psocratic_home"
    shell_append_psocratic_init_to_rc_file $psocratic_home $shell_rc_file

    psocratic_email=$(echo $aws_google_auth \
        | $deps exec jq -r .user_email)
    aws_access_key_id=$(echo $aws_google_auth \
        | $deps exec jq -r .aws_access_key_id)
    aws_secret_access_key=$(echo $aws_google_auth \
        | $deps exec jq -r .aws_secret_access_key)
    aws_security_token=$(echo $aws_google_auth \
        | $deps exec jq -r .aws_security_token)
    aws_session_token=$(echo $aws_google_auth \
        | $deps exec jq -r .aws_session_token)

    extra_aws_args=""
    if [ ! -z "$aws_session_token" ]; then
        extra_aws_args="$extra_aws_args -aws-session-token $aws_session_token"
    fi

    export PSOCRATIC_HOME="$psocratic_home"
    export PATH="$psocratic_home/toolbelt:$PATH"
    psocratic init                                       \
        -aws-access-key-id "$aws_access_key_id"          \
        -aws-secret-access-key  "$aws_secret_access_key" \
        -aws-security-token "$aws_security_token"        \
        $extra_aws_args                                  \
        -email "$psocratic_email"                        \
        -github-token "$github_token"                    \
        -github-username "$github_username"              \
    || return $?
    log "successfully installed psocratic"
}
